{"mappings":"ACwNA,QAAQ,GAAG,CAFE,K,4D","sources":["<anon>","src/index.mjs"],"sourcesContent":["var $761f97bf09d51d3e$exports = {};\n/**\n * const,let等の変数宣言\n */ //  var vall = \"var変数\";\n//  console.log(vall);\n//  //var変数は上書き可能\n//  vall = \"var変数を上書き\";\n//  console.log(vall);\n//  //var変数は再宣言可能\n//  var vall = \"var変数を再宣言可能\"\n//  console.log(vall);\n// let val2 = \"let変数\";\n// console.log(val2)\n// //letは上書き可能\n// val2 = \"let変数を上書き\"\n// console.log(val2);\n// //letは再宣言不可能\n// let val2 = \"let変数を再宣言\";\n// const val3 = \"const変数\";\n// console.log(val3);\n//const変数は上書き不可\n//val3 = \"const変数を上書き\";\n// const val3 = \"const変数を再宣言\"\n//constで定義したオブジェクトはプロパティの変更が可能\n// const val4 = {\n//   name: \"kurihara\",\n//   age:22,\n// };\n// val4.name = \"Marco\";\n// val4.address = \"hiroshima\";\n// console.log(val4);\n//constで定義した配列はプロパティの変更が可能\n// const val5 = ['dog', 'cat'];\n// val5[0] = \"bird\";\n// val5.push(\"monkey\");\n// console.log(val5);\n/**\n * テンプレート文字列\n */ // const name = \"Lika\";\n// const age = \"22\";\n//私の名前はLikaです。年齢は22歳です。\n//従来の方法\n// const message1 = \"私の名前は\" + name + \"です。年齢は\" + age + \"です。\";\n//console.log(message1);\n//テンプレート文字列を用い他方法\n// const message2 = `私の名前は${name}です。年齢は${age}です。`\n// console.log(message2)\n/**\n * アロー関数\n */ //往来の関数\n// function func1(str) {\n//   return str;\n// }\n// const func1 = function(str){\n//   return str;\n// }\n// console.log(func1(\"func1です。\"));\n//アロー関数\n// const func2 = str => {\n//   return str;\n// };\n// console.log(func2(\"func2です。\"));\n// const func3 = (num1,num2) =>  num1 + num2;\n// console.log(func3(10,20));\n/**\n * 分割代入\n */ // const myprofile = {\n//   name: \"Marco\",\n//   age:40,\n// };\n// const message1 = `私の名前は${myprofile.name}です。年齢は${myprofile.age}歳です。`;\n// console.log(message1);\n//分割代入をしようしてもっとすっきりした記述にする\n// const {name, age } = myprofile;\n// const message2 = `私の名前は${name}です。年齢は${age}歳です。`;\n// console.log(message2);\n// const myprofiel = ['Marco', 40];\n// const message3 = `名前は${myprofiel[0]}です。年齢は${myprofiel[1]}歳です。`;\n// console.log(message3);\n// const [name, age] = myprofiel;\n// const message4 = `名前は${name}です。年齢は${age}歳です。`;\n// console.log(message4);\n/**  \n * デフォルト値、　引数など\n */ // const sayHello = (name = \"海賊\") =>console.log(`こんにちは！${name}さん！`);\n// sayHello();\n/**\n * スプレッド構文...\n */ //配列の展開\n// const arr1 = [1, 2];\n// console.log(arr1);\n// console.log(...arr1);\n// const sumFunc = (num1, num2) => console.log(num1 + num2);\n// sumFunc(arr1[0], arr1[1]);\n// sumFunc(...arr1);\n//まとめる\n// const arr2 = [1, 2, 3, 4, 5];\n// const [num1, num2, ...arr3] = arr2;\n// console.log(num1);\n// console.log(num2);\n// console.log(arr3);\n//配列のコピー、結合\n// const arr4 = [10,20];\n// const arr5 = [30,40];\n// const arr6 = [...arr4];\n// arr6[0] = 100;\n//  console.log(arr6);\n//  console.log(arr4);\n// const arr7 = [...arr4, ...arr5];\n// console.log(arr7);\n// const arr8 = arr4;\n// console.log(arr8);\n// arr8[0] = 100;\n// console.log(arr8);\n// console.log(arr4);\n/**\n * mapやfilterを使った配列の処理\n */ //const nameArr = [\"田中\", \"山田\", \"マルコ\",];\n// for(let index = 0; index < nameArr.length; index++){\n//   console.log(`${index + 1}番目は${nameArr[index]}です。`);\n// }\n// const nameArr2 = nameArr.map((name) => {\n//   return name;\n// })\n// console.log(nameArr2);\n// nameArr.map((name, index) => console.log(`${index + 1}番目は${name}です。`))\n// const numArr = [1, 2, 3, 4, 5];\n// const newNumArr = numArr.filter((num) => {\n//   return num % 2 === 1;\n// } );\n// console.log(newNumArr);\n// const newNameArr = nameArr.map((name) => {\n//   if (name === \"マルコ\"){\n//     return name\n//   } else {\n//     return `${name}さん`\n//   }\n// })\n// console.log(newNameArr)\n/**\n * 三項演算子\n */ //ある条件　？　条件がtrueの時 :条件が''falseの時\n// const vall = 1 > 0 ? 'trueです' : 'falseです';\n// console.log(vall);\n// const checkSum = (num1, num2) => {\n//   return num1 + num2 > 100? '100を超えています':'許容範囲外です、';\n// }\n// console.log(checkSum(50,60))\n// const flag1 = true;\n// const flag2 = false;\n// if(flag1 || flag2);{\n//   console.log(\"1か2はtrueになります\");\n// }\n// if(flag1 && flag2);{\n//   console.log(\"1も2もtrueになります\");\n// }\n// || 左側がfalseなら右側を返す\n// const num = 100;\n// const fee = num || \"金額未設定です。\";\n// console.log(fee);\n//&&は左側がtrueなら右側を返す\nconst $761f97bf09d51d3e$var$num2 = null;\nconst $761f97bf09d51d3e$var$fee2 = $761f97bf09d51d3e$var$num2 && \"\\u4F55\\u304B\\u8A2D\\u5B9A\\u3055\\u308C\\u307E\\u3057\\u305F\";\nconsole.log($761f97bf09d51d3e$var$fee2);\n\n\n//# sourceMappingURL=index.db46343c.js.map\n","/**\n * const,let等の変数宣言\n */\n//  var vall = \"var変数\";\n//  console.log(vall);\n\n//  //var変数は上書き可能\n//  vall = \"var変数を上書き\";\n//  console.log(vall);\n\n//  //var変数は再宣言可能\n//  var vall = \"var変数を再宣言可能\"\n//  console.log(vall);\n\n// let val2 = \"let変数\";\n// console.log(val2)\n\n// //letは上書き可能\n// val2 = \"let変数を上書き\"\n// console.log(val2);\n\n// //letは再宣言不可能\n// let val2 = \"let変数を再宣言\";\n\n// const val3 = \"const変数\";\n// console.log(val3);\n\n//const変数は上書き不可\n//val3 = \"const変数を上書き\";\n\n// const val3 = \"const変数を再宣言\"\n\n//constで定義したオブジェクトはプロパティの変更が可能\n// const val4 = {\n//   name: \"kurihara\",\n//   age:22,\n// };\n// val4.name = \"Marco\";\n// val4.address = \"hiroshima\";\n// console.log(val4);\n\n//constで定義した配列はプロパティの変更が可能\n// const val5 = ['dog', 'cat'];\n// val5[0] = \"bird\";\n// val5.push(\"monkey\");\n// console.log(val5);\n\n/**\n * テンプレート文字列\n */\n// const name = \"Lika\";\n// const age = \"22\";\n//私の名前はLikaです。年齢は22歳です。\n\n//従来の方法\n// const message1 = \"私の名前は\" + name + \"です。年齢は\" + age + \"です。\";\n//console.log(message1);\n\n//テンプレート文字列を用い他方法\n// const message2 = `私の名前は${name}です。年齢は${age}です。`\n// console.log(message2)\n\n/**\n * アロー関数\n */\n//往来の関数\n// function func1(str) {\n//   return str;\n// }\n// const func1 = function(str){\n//   return str;\n// }\n// console.log(func1(\"func1です。\"));\n\n//アロー関数\n// const func2 = str => {\n//   return str;\n// };\n// console.log(func2(\"func2です。\"));\n\n// const func3 = (num1,num2) =>  num1 + num2;\n\n// console.log(func3(10,20));\n\n/**\n * 分割代入\n */\n\n// const myprofile = {\n//   name: \"Marco\",\n//   age:40,\n// };\n\n// const message1 = `私の名前は${myprofile.name}です。年齢は${myprofile.age}歳です。`;\n// console.log(message1);\n\n//分割代入をしようしてもっとすっきりした記述にする\n// const {name, age } = myprofile;\n// const message2 = `私の名前は${name}です。年齢は${age}歳です。`;\n// console.log(message2);\n\n// const myprofiel = ['Marco', 40];\n\n// const message3 = `名前は${myprofiel[0]}です。年齢は${myprofiel[1]}歳です。`;\n// console.log(message3);\n\n// const [name, age] = myprofiel;\n// const message4 = `名前は${name}です。年齢は${age}歳です。`;\n// console.log(message4);\n\n/**  \n * デフォルト値、　引数など\n */\n// const sayHello = (name = \"海賊\") =>console.log(`こんにちは！${name}さん！`);\n// sayHello();\n\n/**\n * スプレッド構文...\n */\n//配列の展開\n// const arr1 = [1, 2];\n// console.log(arr1);\n// console.log(...arr1);\n\n// const sumFunc = (num1, num2) => console.log(num1 + num2);\n// sumFunc(arr1[0], arr1[1]);\n// sumFunc(...arr1);\n\n//まとめる\n// const arr2 = [1, 2, 3, 4, 5];\n// const [num1, num2, ...arr3] = arr2;\n// console.log(num1);\n// console.log(num2);\n// console.log(arr3);\n\n//配列のコピー、結合\n// const arr4 = [10,20];\n// const arr5 = [30,40];\n\n// const arr6 = [...arr4];\n// arr6[0] = 100;\n//  console.log(arr6);\n//  console.log(arr4);\n\n// const arr7 = [...arr4, ...arr5];\n// console.log(arr7);\n\n// const arr8 = arr4;\n// console.log(arr8);\n// arr8[0] = 100;\n// console.log(arr8);\n// console.log(arr4);\n\n/**\n * mapやfilterを使った配列の処理\n */\n//const nameArr = [\"田中\", \"山田\", \"マルコ\",];\n// for(let index = 0; index < nameArr.length; index++){\n//   console.log(`${index + 1}番目は${nameArr[index]}です。`);\n// }\n\n// const nameArr2 = nameArr.map((name) => {\n//   return name;\n// })\n// console.log(nameArr2);\n\n// nameArr.map((name, index) => console.log(`${index + 1}番目は${name}です。`))\n\n// const numArr = [1, 2, 3, 4, 5];\n// const newNumArr = numArr.filter((num) => {\n//   return num % 2 === 1;\n// } );\n// console.log(newNumArr);\n\n// const newNameArr = nameArr.map((name) => {\n//   if (name === \"マルコ\"){\n//     return name\n//   } else {\n//     return `${name}さん`\n//   }\n// })\n// console.log(newNameArr)\n\n\n/**\n * 三項演算子\n */\n//ある条件　？　条件がtrueの時 :条件が''falseの時\n// const vall = 1 > 0 ? 'trueです' : 'falseです';\n// console.log(vall);\n\n// const checkSum = (num1, num2) => {\n//   return num1 + num2 > 100? '100を超えています':'許容範囲外です、';\n// }\n// console.log(checkSum(50,60))\n\n// const flag1 = true;\n// const flag2 = false;\n\n// if(flag1 || flag2);{\n//   console.log(\"1か2はtrueになります\");\n// }\n\n// if(flag1 && flag2);{\n//   console.log(\"1も2もtrueになります\");\n// }\n\n// || 左側がfalseなら右側を返す\n// const num = 100;\n// const fee = num || \"金額未設定です。\";\n// console.log(fee);\n\n\n//&&は左側がtrueなら右側を返す\nconst num2 = null;\nconst fee2 = num2 && \"何か設定されました\";\nconsole.log(fee2);\n\n\n"],"names":["console","log"],"version":3,"file":"index.db46343c.js.map"}